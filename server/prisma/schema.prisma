// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
  decorate_1_type        = "@(Create|Update)@(One|Many)UserArgs"
  decorate_1_field       = data
  decorate_1_name        = ValidateNested
  decorate_1_from        = "class-validator"
  decorate_1_arguments   = "[]"
  decorate_2_type        = "@(Create|Update)@(One|Many)UserArgs"
  decorate_2_field       = data
  decorate_2_from        = "class-transformer"
  decorate_2_arguments   = "['() => {propertyType.0}']"
  decorate_2_name        = Type
  decorate_2_namedImport = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  /// User's name
  /// @Validator.MinLength(3)
  /// @Validator.MaxLength(50)
  username  String
  /// @HideField()
  password  String
  /// @HideField({input: true})
  lastLogin DateTime?
  /// @Validator.IsEmail()
  email     String    @unique
  firstName String
  lastName  String
  sirName   String    @default("")
  avatar    String    @default("")
  birthday  DateTime?
  /// @HideField({input:true})
  agreement DateTime?
  /// @HideField({input:true})
  createdAt DateTime  @default(now())
  posts     Post[]
  groups    Group[]
  sessions Session[]
}

model Session {
  id   Int  @id @default(autoincrement())
  metadata Json
  user User @relation(fields: [userId], references: [id])
  userId Int
  tokens Token[]
}

model Token {
  id   Int  @id @default(autoincrement())
  session Session @relation(fields: [sessionId], references: [id])
  sessionId Int
  jwt String @unique()
  refresh String @unique()
  revoked Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Post {
  id     Int    @id @default(autoincrement())
  name   String
  author User   @relation(fields: [userId], references: [id])
  userId Int
}

model Group {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}
