# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

type Group {
  _count: GroupCount!
  id: ID!
  name: String!
  users: [User!]
}

type GroupCount {
  users: Int!
}

input GroupCreateNestedManyWithoutUsersInput {
  connect: [GroupWhereUniqueInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutUsersInput!]
  create: [GroupCreateWithoutUsersInput!]
}

input GroupCreateOrConnectWithoutUsersInput {
  create: GroupCreateWithoutUsersInput!
  where: GroupWhereUniqueInput!
}

input GroupCreateWithoutUsersInput {
  name: String!
}

input GroupListRelationFilter {
  every: GroupWhereInput
  none: GroupWhereInput
  some: GroupWhereInput
}

input GroupScalarWhereInput {
  AND: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  id: IntFilter
  name: StringFilter
}

input GroupUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input GroupUpdateManyWithWhereWithoutUsersInput {
  data: GroupUpdateManyMutationInput!
  where: GroupScalarWhereInput!
}

input GroupUpdateManyWithoutUsersInput {
  connect: [GroupWhereUniqueInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutUsersInput!]
  create: [GroupCreateWithoutUsersInput!]
  delete: [GroupWhereUniqueInput!]
  deleteMany: [GroupScalarWhereInput!]
  disconnect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [GroupUpdateManyWithWhereWithoutUsersInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutUsersInput!]
}

input GroupUpdateWithWhereUniqueWithoutUsersInput {
  data: GroupUpdateWithoutUsersInput!
  where: GroupWhereUniqueInput!
}

input GroupUpdateWithoutUsersInput {
  name: StringFieldUpdateOperationsInput
}

input GroupUpsertWithWhereUniqueWithoutUsersInput {
  create: GroupCreateWithoutUsersInput!
  update: GroupUpdateWithoutUsersInput!
  where: GroupWhereUniqueInput!
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  id: IntFilter
  name: StringFilter
  users: UserListRelationFilter
}

input GroupWhereUniqueInput {
  id: Int
}

input InputUser {
  after: UserWhereUniqueInput
  first: Int
  skip: Int
  where: UserWhereInput
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JsonFilter {
  equals: JSON
  not: JSON
}

type Mutation {
  changeUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  createUser(data: UserCreateInput!): User!
  fullLogOut: Boolean!
  refreshSession(data: RefreshSessionInput!): TokenType!
  signIn(data: SignInInput!): TokenType!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

type Post {
  author: User!
  id: ID!
  name: String!
  userId: Int!
}

input PostCreateManyAuthorInput {
  id: Int
  name: String!
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  name: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  userId: IntFilter
}

input PostUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  name: StringFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserRelationFilter
  id: IntFilter
  name: StringFilter
  userId: IntFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  me: User!
  users(input: InputUser): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input RefreshSessionInput {
  refreshToken: String!
}

type Session {
  _count: SessionCount!
  id: ID!
  metadata: JSON!
  tokens: [Token!]
  user: User!
  userId: Int!
}

type SessionCount {
  tokens: Int!
}

input SessionCreateManyUserInput {
  id: Int
  metadata: JSON!
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  metadata: JSON!
  tokens: TokenCreateNestedManyWithoutSessionInput
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

input SessionRelationFilter {
  is: SessionWhereInput
  isNot: SessionWhereInput
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  id: IntFilter
  metadata: JsonFilter
  userId: IntFilter
}

input SessionUpdateManyMutationInput {
  metadata: JSON
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUpdateManyMutationInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  metadata: JSON
  tokens: TokenUpdateManyWithoutSessionInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  update: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  id: IntFilter
  metadata: JsonFilter
  tokens: TokenListRelationFilter
  user: UserRelationFilter
  userId: IntFilter
}

input SessionWhereUniqueInput {
  id: Int
}

input SignInInput {
  email: String!
  password: String!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Token {
  createdAt: DateTime!
  id: ID!
  jwt: String!
  refresh: String!
  revoked: Boolean!
  session: Session!
  sessionId: Int!
  updatedAt: DateTime!
}

input TokenCreateManySessionInput {
  createdAt: DateTime
  id: Int
  jwt: String!
  refresh: String!
  revoked: Boolean!
  updatedAt: DateTime
}

input TokenCreateManySessionInputEnvelope {
  data: [TokenCreateManySessionInput!]!
  skipDuplicates: Boolean
}

input TokenCreateNestedManyWithoutSessionInput {
  connect: [TokenWhereUniqueInput!]
  connectOrCreate: [TokenCreateOrConnectWithoutSessionInput!]
  create: [TokenCreateWithoutSessionInput!]
  createMany: TokenCreateManySessionInputEnvelope
}

input TokenCreateOrConnectWithoutSessionInput {
  create: TokenCreateWithoutSessionInput!
  where: TokenWhereUniqueInput!
}

input TokenCreateWithoutSessionInput {
  createdAt: DateTime
  jwt: String!
  refresh: String!
  revoked: Boolean!
  updatedAt: DateTime
}

input TokenListRelationFilter {
  every: TokenWhereInput
  none: TokenWhereInput
  some: TokenWhereInput
}

input TokenScalarWhereInput {
  AND: [TokenScalarWhereInput!]
  NOT: [TokenScalarWhereInput!]
  OR: [TokenScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  jwt: StringFilter
  refresh: StringFilter
  revoked: BoolFilter
  sessionId: IntFilter
  updatedAt: DateTimeFilter
}

type TokenType {
  accessToken: String!
  accessTokenExpiresAt: Int!
  refreshToken: String!
  refreshTokenExpiresAt: Int!
}

input TokenUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  jwt: StringFieldUpdateOperationsInput
  refresh: StringFieldUpdateOperationsInput
  revoked: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TokenUpdateManyWithWhereWithoutSessionInput {
  data: TokenUpdateManyMutationInput!
  where: TokenScalarWhereInput!
}

input TokenUpdateManyWithoutSessionInput {
  connect: [TokenWhereUniqueInput!]
  connectOrCreate: [TokenCreateOrConnectWithoutSessionInput!]
  create: [TokenCreateWithoutSessionInput!]
  createMany: TokenCreateManySessionInputEnvelope
  delete: [TokenWhereUniqueInput!]
  deleteMany: [TokenScalarWhereInput!]
  disconnect: [TokenWhereUniqueInput!]
  set: [TokenWhereUniqueInput!]
  update: [TokenUpdateWithWhereUniqueWithoutSessionInput!]
  updateMany: [TokenUpdateManyWithWhereWithoutSessionInput!]
  upsert: [TokenUpsertWithWhereUniqueWithoutSessionInput!]
}

input TokenUpdateWithWhereUniqueWithoutSessionInput {
  data: TokenUpdateWithoutSessionInput!
  where: TokenWhereUniqueInput!
}

input TokenUpdateWithoutSessionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  jwt: StringFieldUpdateOperationsInput
  refresh: StringFieldUpdateOperationsInput
  revoked: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TokenUpsertWithWhereUniqueWithoutSessionInput {
  create: TokenCreateWithoutSessionInput!
  update: TokenUpdateWithoutSessionInput!
  where: TokenWhereUniqueInput!
}

input TokenWhereInput {
  AND: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  jwt: StringFilter
  refresh: StringFilter
  revoked: BoolFilter
  session: SessionRelationFilter
  sessionId: IntFilter
  updatedAt: DateTimeFilter
}

input TokenWhereUniqueInput {
  id: Int
  jwt: String
  refresh: String
}

type User {
  _count: UserCount!
  agreement: DateTime
  avatar: String!
  birthday: DateTime
  createdAt: DateTime!
  email: String!
  firstName: String!
  groups: [Group!]
  id: ID!
  lastLogin: DateTime
  lastName: String!
  posts: [Post!]
  sessions: [Session!]
  sirName: String!

  """User's name"""
  username: String!
}

type UserCount {
  groups: Int!
  posts: Int!
  sessions: Int!
}

input UserCreateInput {
  avatar: String
  birthday: DateTime
  email: String!
  firstName: String!
  groups: GroupCreateNestedManyWithoutUsersInput
  lastName: String!
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  sessions: SessionCreateNestedManyWithoutUserInput
  sirName: String
  username: String!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserUpdateInput {
  avatar: StringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  groups: GroupUpdateManyWithoutUsersInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  sessions: SessionUpdateManyWithoutUserInput
  sirName: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  avatar: StringFilter
  birthday: DateTimeNullableFilter
  email: StringFilter
  firstName: StringFilter
  groups: GroupListRelationFilter
  id: IntFilter
  lastName: StringFilter
  password: StringFilter
  posts: PostListRelationFilter
  sessions: SessionListRelationFilter
  sirName: StringFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}